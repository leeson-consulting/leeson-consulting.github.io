{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Haere mai","text":"<p>I setup Leeson Consulting in 2013 to supply software R&amp;D to the Otautahi (Christchurch) technical community.</p> <p>My background is in electrical engineering with over 20 years experience in software R&amp;D. Over the years I have worked with Eaton, Tait, Trimble, Dynamic Controls, Enphase, and others to help deliver their embedded / desktop / and web based products.</p> <p>A smaller but no less important part of the business is providing Korean translation and interpreting services. My wife \uc774\uac15\uc219 (Kangsook) is a NAATI 3 accredited professional interpreter and regularly assists with the GAP training courses run in support of Korean fishing companies based in Aotearoa (NZ).</p> <p>The Blog contains technical and other musings on various topics. Some of those musings get promoted into FOSS projects.</p> <p>Feel free to look around.</p> <p>\"Steve Simpson\" leeson.consulting@gmail.com</p> <p></p>"},{"location":"license/","title":"Leeson Content License","text":"<p>All content of this repository is Copyright (c) 2024 Leeson Consulting Limited, unless otherwise noted.</p> <p>The content is licensed via CC BY-NC-ND 4.0, which is reproduced below.</p> <p>Any party wishing to use the content under different terms must contact the copyright holders who at their sole discretion may choose to license the content under alternative terms to that party.</p>"},{"location":"license/#contributors","title":"Contributors","text":"<ul> <li>Stephen William Simpson (culyun)</li> </ul>"},{"location":"license/#attribution-notices","title":"Attribution Notices","text":"<p>When complying with this license, attribution must be given to the copyright holders and contributors in any documentation, advertising, marketing, etc. incorporating the content.</p> <p>Attribution must be worded as follows:</p> <p><code>Your_Incorporating_Work</code> makes use of content from leeson.github.io under the CC BY-NC-ND 4.0 license, which may be reviewed at https://creativecommons.org/licenses/by-nc-nd/4.0/</p> <p>leeson.github.io is Copyright:   <code>Copyright_Holders</code></p> <p>with contributions from:   <code>Contributors</code></p>"},{"location":"license/#cc-by-nc-nd-40","title":"CC BY-NC-ND 4.0","text":"<p>Attribution-NonCommercial-NoDerivatives 4.0 International</p> <p>=======================================================================</p> <p>Creative Commons Corporation (\"Creative Commons\") is not a law firm and does not provide legal services or legal advice. Distribution of Creative Commons public licenses does not create a lawyer-client or other relationship. Creative Commons makes its licenses and related information available on an \"as-is\" basis. Creative Commons gives no warranties regarding its licenses, any material licensed under their terms and conditions, or any related information. Creative Commons disclaims all liability for damages resulting from their use to the fullest extent possible.</p> <p>Using Creative Commons Public Licenses</p> <p>Creative Commons public licenses provide a standard set of terms and conditions that creators and other rights holders may use to share original works of authorship and other material subject to copyright and certain other rights specified in the public license below. The following considerations are for informational purposes only, are not exhaustive, and do not form part of our licenses.</p> <pre><code> Considerations for licensors: Our public licenses are\n intended for use by those authorized to give the public\n permission to use material in ways otherwise restricted by\n copyright and certain other rights. Our licenses are\n irrevocable. Licensors should read and understand the terms\n and conditions of the license they choose before applying it.\n Licensors should also secure all rights necessary before\n applying our licenses so that the public can reuse the\n material as expected. Licensors should clearly mark any\n material not subject to the license. This includes other CC-\n licensed material, or material used under an exception or\n limitation to copyright. More considerations for licensors:\nwiki.creativecommons.org/Considerations_for_licensors\n\n Considerations for the public: By using one of our public\n licenses, a licensor grants the public permission to use the\n licensed material under specified terms and conditions. If\n the licensor's permission is not necessary for any reason--for\n example, because of any applicable exception or limitation to\n copyright--then that use is not regulated by the license. Our\n licenses grant only permissions under copyright and certain\n other rights that a licensor has authority to grant. Use of\n the licensed material may still be restricted for other\n reasons, including because others have copyright or other\n rights in the material. A licensor may make special requests,\n such as asking that all changes be marked or described.\n Although not required by our licenses, you are encouraged to\n respect those requests where reasonable. More considerations\n for the public:\nwiki.creativecommons.org/Considerations_for_licensees\n</code></pre> <p>=======================================================================</p> <p>Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License</p> <p>By exercising the Licensed Rights (defined below), You accept and agree to be bound by the terms and conditions of this Creative Commons Attribution-NonCommercial-NoDerivatives 4.0 International Public License (\"Public License\"). To the extent this Public License may be interpreted as a contract, You are granted the Licensed Rights in consideration of Your acceptance of these terms and conditions, and the Licensor grants You such rights in consideration of benefits the Licensor receives from making the Licensed Material available under these terms and conditions.</p> <p>Section 1 -- Definitions.</p> <p>a. Adapted Material means material subject to Copyright and Similar      Rights that is derived from or based upon the Licensed Material      and in which the Licensed Material is translated, altered,      arranged, transformed, or otherwise modified in a manner requiring      permission under the Copyright and Similar Rights held by the      Licensor. For purposes of this Public License, where the Licensed      Material is a musical work, performance, or sound recording,      Adapted Material is always produced where the Licensed Material is      synched in timed relation with a moving image.</p> <p>b. Copyright and Similar Rights means copyright and/or similar rights      closely related to copyright including, without limitation,      performance, broadcast, sound recording, and Sui Generis Database      Rights, without regard to how the rights are labeled or      categorized. For purposes of this Public License, the rights      specified in Section 2(b)(1)-(2) are not Copyright and Similar      Rights.</p> <p>c. Effective Technological Measures means those measures that, in the      absence of proper authority, may not be circumvented under laws      fulfilling obligations under Article 11 of the WIPO Copyright      Treaty adopted on December 20, 1996, and/or similar international      agreements.</p> <p>d. Exceptions and Limitations means fair use, fair dealing, and/or      any other exception or limitation to Copyright and Similar Rights      that applies to Your use of the Licensed Material.</p> <p>e. Licensed Material means the artistic or literary work, database,      or other material to which the Licensor applied this Public      License.</p> <p>f. Licensed Rights means the rights granted to You subject to the      terms and conditions of this Public License, which are limited to      all Copyright and Similar Rights that apply to Your use of the      Licensed Material and that the Licensor has authority to license.</p> <p>g. Licensor means the individual(s) or entity(ies) granting rights      under this Public License.</p> <p>h. NonCommercial means not primarily intended for or directed towards      commercial advantage or monetary compensation. For purposes of      this Public License, the exchange of the Licensed Material for      other material subject to Copyright and Similar Rights by digital      file-sharing or similar means is NonCommercial provided there is      no payment of monetary compensation in connection with the      exchange.</p> <p>i. Share means to provide material to the public by any means or      process that requires permission under the Licensed Rights, such      as reproduction, public display, public performance, distribution,      dissemination, communication, or importation, and to make material      available to the public including in ways that members of the      public may access the material from a place and at a time      individually chosen by them.</p> <p>j. Sui Generis Database Rights means rights other than copyright      resulting from Directive 96/9/EC of the European Parliament and of      the Council of 11 March 1996 on the legal protection of databases,      as amended and/or succeeded, as well as other essentially      equivalent rights anywhere in the world.</p> <p>k. You means the individual or entity exercising the Licensed Rights      under this Public License. Your has a corresponding meaning.</p> <p>Section 2 -- Scope.</p> <p>a. License grant.</p> <pre><code>   1. Subject to the terms and conditions of this Public License,\n      the Licensor hereby grants You a worldwide, royalty-free,\n      non-sublicensable, non-exclusive, irrevocable license to\n      exercise the Licensed Rights in the Licensed Material to:\n\n        a. reproduce and Share the Licensed Material, in whole or\n           in part, for NonCommercial purposes only; and\n\n        b. produce and reproduce, but not Share, Adapted Material\n           for NonCommercial purposes only.\n\n   2. Exceptions and Limitations. For the avoidance of doubt, where\n      Exceptions and Limitations apply to Your use, this Public\n      License does not apply, and You do not need to comply with\n      its terms and conditions.\n\n   3. Term. The term of this Public License is specified in Section\n      6(a).\n\n   4. Media and formats; technical modifications allowed. The\n      Licensor authorizes You to exercise the Licensed Rights in\n      all media and formats whether now known or hereafter created,\n      and to make technical modifications necessary to do so. The\n      Licensor waives and/or agrees not to assert any right or\n      authority to forbid You from making technical modifications\n      necessary to exercise the Licensed Rights, including\n      technical modifications necessary to circumvent Effective\n      Technological Measures. For purposes of this Public License,\n      simply making modifications authorized by this Section 2(a)\n      (4) never produces Adapted Material.\n\n   5. Downstream recipients.\n\n        a. Offer from the Licensor -- Licensed Material. Every\n           recipient of the Licensed Material automatically\n           receives an offer from the Licensor to exercise the\n           Licensed Rights under the terms and conditions of this\n           Public License.\n\n        b. No downstream restrictions. You may not offer or impose\n           any additional or different terms or conditions on, or\n           apply any Effective Technological Measures to, the\n           Licensed Material if doing so restricts exercise of the\n           Licensed Rights by any recipient of the Licensed\n           Material.\n\n   6. No endorsement. Nothing in this Public License constitutes or\n      may be construed as permission to assert or imply that You\n      are, or that Your use of the Licensed Material is, connected\n      with, or sponsored, endorsed, or granted official status by,\n      the Licensor or others designated to receive attribution as\n      provided in Section 3(a)(1)(A)(i).\n</code></pre> <p>b. Other rights.</p> <pre><code>   1. Moral rights, such as the right of integrity, are not\n      licensed under this Public License, nor are publicity,\n      privacy, and/or other similar personality rights; however, to\n      the extent possible, the Licensor waives and/or agrees not to\n      assert any such rights held by the Licensor to the limited\n      extent necessary to allow You to exercise the Licensed\n      Rights, but not otherwise.\n\n   2. Patent and trademark rights are not licensed under this\n      Public License.\n\n   3. To the extent possible, the Licensor waives any right to\n      collect royalties from You for the exercise of the Licensed\n      Rights, whether directly or through a collecting society\n      under any voluntary or waivable statutory or compulsory\n      licensing scheme. In all other cases the Licensor expressly\n      reserves any right to collect such royalties, including when\n      the Licensed Material is used other than for NonCommercial\n      purposes.\n</code></pre> <p>Section 3 -- License Conditions.</p> <p>Your exercise of the Licensed Rights is expressly made subject to the following conditions.</p> <p>a. Attribution.</p> <pre><code>   1. If You Share the Licensed Material, You must:\n\n        a. retain the following if it is supplied by the Licensor\n           with the Licensed Material:\n\n             i. identification of the creator(s) of the Licensed\n                Material and any others designated to receive\n                attribution, in any reasonable manner requested by\n                the Licensor (including by pseudonym if\n                designated);\n\n            ii. a copyright notice;\n\n           iii. a notice that refers to this Public License;\n\n            iv. a notice that refers to the disclaimer of\n                warranties;\n\n             v. a URI or hyperlink to the Licensed Material to the\n                extent reasonably practicable;\n\n        b. indicate if You modified the Licensed Material and\n           retain an indication of any previous modifications; and\n\n        c. indicate the Licensed Material is licensed under this\n           Public License, and include the text of, or the URI or\n           hyperlink to, this Public License.\n\n      For the avoidance of doubt, You do not have permission under\n      this Public License to Share Adapted Material.\n\n   2. You may satisfy the conditions in Section 3(a)(1) in any\n      reasonable manner based on the medium, means, and context in\n      which You Share the Licensed Material. For example, it may be\n      reasonable to satisfy the conditions by providing a URI or\n      hyperlink to a resource that includes the required\n      information.\n\n   3. If requested by the Licensor, You must remove any of the\n      information required by Section 3(a)(1)(A) to the extent\n      reasonably practicable.\n</code></pre> <p>Section 4 -- Sui Generis Database Rights.</p> <p>Where the Licensed Rights include Sui Generis Database Rights that apply to Your use of the Licensed Material:</p> <p>a. for the avoidance of doubt, Section 2(a)(1) grants You the right      to extract, reuse, reproduce, and Share all or a substantial      portion of the contents of the database for NonCommercial purposes      only and provided You do not Share Adapted Material;</p> <p>b. if You include all or a substantial portion of the database      contents in a database in which You have Sui Generis Database      Rights, then the database in which You have Sui Generis Database      Rights (but not its individual contents) is Adapted Material; and</p> <p>c. You must comply with the conditions in Section 3(a) if You Share      all or a substantial portion of the contents of the database.</p> <p>For the avoidance of doubt, this Section 4 supplements and does not replace Your obligations under this Public License where the Licensed Rights include other Copyright and Similar Rights.</p> <p>Section 5 -- Disclaimer of Warranties and Limitation of Liability.</p> <p>a. UNLESS OTHERWISE SEPARATELY UNDERTAKEN BY THE LICENSOR, TO THE      EXTENT POSSIBLE, THE LICENSOR OFFERS THE LICENSED MATERIAL AS-IS      AND AS-AVAILABLE, AND MAKES NO REPRESENTATIONS OR WARRANTIES OF      ANY KIND CONCERNING THE LICENSED MATERIAL, WHETHER EXPRESS,      IMPLIED, STATUTORY, OR OTHER. THIS INCLUDES, WITHOUT LIMITATION,      WARRANTIES OF TITLE, MERCHANTABILITY, FITNESS FOR A PARTICULAR      PURPOSE, NON-INFRINGEMENT, ABSENCE OF LATENT OR OTHER DEFECTS,      ACCURACY, OR THE PRESENCE OR ABSENCE OF ERRORS, WHETHER OR NOT      KNOWN OR DISCOVERABLE. WHERE DISCLAIMERS OF WARRANTIES ARE NOT      ALLOWED IN FULL OR IN PART, THIS DISCLAIMER MAY NOT APPLY TO YOU.</p> <p>b. TO THE EXTENT POSSIBLE, IN NO EVENT WILL THE LICENSOR BE LIABLE      TO YOU ON ANY LEGAL THEORY (INCLUDING, WITHOUT LIMITATION,      NEGLIGENCE) OR OTHERWISE FOR ANY DIRECT, SPECIAL, INDIRECT,      INCIDENTAL, CONSEQUENTIAL, PUNITIVE, EXEMPLARY, OR OTHER LOSSES,      COSTS, EXPENSES, OR DAMAGES ARISING OUT OF THIS PUBLIC LICENSE OR      USE OF THE LICENSED MATERIAL, EVEN IF THE LICENSOR HAS BEEN      ADVISED OF THE POSSIBILITY OF SUCH LOSSES, COSTS, EXPENSES, OR      DAMAGES. WHERE A LIMITATION OF LIABILITY IS NOT ALLOWED IN FULL OR      IN PART, THIS LIMITATION MAY NOT APPLY TO YOU.</p> <p>c. The disclaimer of warranties and limitation of liability provided      above shall be interpreted in a manner that, to the extent      possible, most closely approximates an absolute disclaimer and      waiver of all liability.</p> <p>Section 6 -- Term and Termination.</p> <p>a. This Public License applies for the term of the Copyright and      Similar Rights licensed here. However, if You fail to comply with      this Public License, then Your rights under this Public License      terminate automatically.</p> <p>b. Where Your right to use the Licensed Material has terminated under      Section 6(a), it reinstates:</p> <pre><code>   1. automatically as of the date the violation is cured, provided\n      it is cured within 30 days of Your discovery of the\n      violation; or\n\n   2. upon express reinstatement by the Licensor.\n\n For the avoidance of doubt, this Section 6(b) does not affect any\n right the Licensor may have to seek remedies for Your violations\n of this Public License.\n</code></pre> <p>c. For the avoidance of doubt, the Licensor may also offer the      Licensed Material under separate terms or conditions or stop      distributing the Licensed Material at any time; however, doing so      will not terminate this Public License.</p> <p>d. Sections 1, 5, 6, 7, and 8 survive termination of this Public      License.</p> <p>Section 7 -- Other Terms and Conditions.</p> <p>a. The Licensor shall not be bound by any additional or different      terms or conditions communicated by You unless expressly agreed.</p> <p>b. Any arrangements, understandings, or agreements regarding the      Licensed Material not stated herein are separate from and      independent of the terms and conditions of this Public License.</p> <p>Section 8 -- Interpretation.</p> <p>a. For the avoidance of doubt, this Public License does not, and      shall not be interpreted to, reduce, limit, restrict, or impose      conditions on any use of the Licensed Material that could lawfully      be made without permission under this Public License.</p> <p>b. To the extent possible, if any provision of this Public License is      deemed unenforceable, it shall be automatically reformed to the      minimum extent necessary to make it enforceable. If the provision      cannot be reformed, it shall be severed from this Public License      without affecting the enforceability of the remaining terms and      conditions.</p> <p>c. No term or condition of this Public License will be waived and no      failure to comply consented to unless expressly agreed to by the      Licensor.</p> <p>d. Nothing in this Public License constitutes or may be interpreted      as a limitation upon, or waiver of, any privileges and immunities      that apply to the Licensor or You, including from the legal      processes of any jurisdiction or authority.</p> <p>=======================================================================</p> <p>Creative Commons is not a party to its public licenses. Notwithstanding, Creative Commons may elect to apply one of its public licenses to material it publishes and in those instances will be considered the \u201cLicensor.\u201d The text of the Creative Commons public licenses is dedicated to the public domain under the CC0 Public Domain Dedication. Except for the limited purpose of indicating that material is shared under a Creative Commons public license or as otherwise permitted by the Creative Commons policies published at creativecommons.org/policies, Creative Commons does not authorize the use of the trademark \"Creative Commons\" or any other trademark or logo of Creative Commons without its prior written consent including, without limitation, in connection with any unauthorized modifications to any of its public licenses or any other arrangements, understandings, or agreements concerning use of licensed material. For the avoidance of doubt, this paragraph does not form part of the public licenses. </p>"},{"location":"blog/","title":"Qere and Ketiv - Written to be Read","text":""},{"location":"blog/2024/04/24/base-adaptation-byte-stuffing-babs/","title":"Base Adaptation Byte Stuffing (BABS)","text":"<p>We've looked at two methods of Byte Stuffing framed data, ie. HDLC and COBS. HDLC is fairly industrial. It gets the job done in a simple if not efficient way. COBS is a step up. It makes use of the structure of the underlying data to limit overhead in a consistent way. But there are other methods.</p> <p>The best I have found is called Base Adaptation Byte Stuffing (BABS). BABS is a first principles solution to the underlying problem developed by Jaime Cardoso of Universidade do Porto.</p> <p>If we treat the data is an enormous big-endian number in <code>Base_256</code>, then each digit of that number corresponds to each byte in the data.</p> <p>Now, just like any number we can convert data to a different base. Jaime chose to use <code>Base_255</code>, which of course has one less value than <code>Base_256</code>.</p> <p>Joining the dots we can see the big picture:</p> <p>Converting byte-oriented data to <code>Base_255</code> can be used to eliminate the Frame Delimeter from the data.</p> <p>Customisation</p> <p>Frame Delimeters aren't restricted to the value <code>255</code>, so how do you deal with the default COBS Terminator ie. <code>0x00</code>? First perform the base conversion. Then XOR each byte with <code>0x01</code>.</p> <p>The conversion process expands the number of bits required to store the new number, so what's the transmission cost? Going back to high school maths we can say that a number A requiring N <code>Base_256</code> digits can be written as A' using M <code>Base_255</code> digits where:</p> <p><code>M = N * ceil(log_10(256) / log_10(255));</code></p> <p>Since the multiplier is constant and the expression is linear, we can precompute M for any N. BABS turns out to be very efficient, incuring 1 byte of overhead for every 1415 data bytes! This is close to the theorectical limit set by information theory - so we know we're done.</p>"},{"location":"blog/2024/04/24/base-adaptation-byte-stuffing-babs/#byte-stuffing-overhead-a-quick-comparison","title":"Byte Stuffing Overhead - A Quick Comparison","text":"<p>BABS overhead is completely data agnostic - given the (usual) restriction of sending whole bytes. This in turn means that the worst case performance is the same as the best case performance.</p> <p>COBS overhead is slightly data gnostic. Data containing frequent <code>0x00</code> values will have a very low overhead - as low as one byte irrespective of length. But COBS worst case overhead is consistent, ie. 1 byte every 255 data bytes.</p> <p>HDLC overhead is very data gnostic. It presents no overhead if the data is devoid of <code>0x7e</code>, and 100% overhead if the data is competelt <code>0x7e</code>. The average performance levelling out to around twice that of the worst COBS performance.</p>"},{"location":"blog/2024/04/24/base-adaptation-byte-stuffing-babs/#whats-the-cost","title":"What's the Cost?","text":"<p>MIPS.</p> <p>Jaime made it clear that the algorithm used to convert <code>Base_256</code> data to <code>Base_255</code> data is <code>O(n^2)</code>. He suggested using a simple COBS / BABS hybrid approach for framing. When the data length was less than some computationally feasible bound - use BABS. Otherwise fall back to COBS, which is pretty efficient for moderate sized data anyway.</p> <p>We're going to follow this lead in the next post which looks at COBS + BABS hybridisation.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/","title":"Error Cascade in COBS Encoded Data","text":"<p>Consistent Overhead Byte Stuffing (COBS) is used to frame byte-oriented communications and is described in detail in Wikipedia and elsewhere. COBS is used as a lower overhead alternative to HDLC Byte Stuffing.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#cobs-overview","title":"COBS Overview","text":"<p>A short explanation of COBS is that it replaces each <code>0x00</code> encountered in the data with a linked list of the distances between each <code>0x00</code>. Since the links can never be <code>0x00</code>, the only overhead is the insertion of COBS Link-Bytes to bridge the gaps between those <code>0x00</code> values more than 255 bytes apart.</p> <p>COBS treats data exhausted of (or not containing) <code>0x00</code> as having a final <code>0x00</code> at the end of data. This dictates the repeated insertion of COBS Link-Bytes until the final link, which sets the location of the <code>0x00</code> Frame Terminator sealing the COBS frame.</p> <p>Each COBS Link-Byte adds overhead at a consistent worst-case rate of 1/255 of the message length. This is much better than the worst-case rate for HDLC Byte Stuffing, which is twice the message length.</p> <p>Overhead</p> <p>HDLC Byte Stuffing overhead is very sensitive to message content. Uniformly distributed random data (eg. encrypted data), achieves an average overhead of 2/256. However, high overhead is associated with data containin many HDLC Frame Sequence (<code>0x7e</code>) bytes or Control Escape (<code>0x7d</code>) bytes.</p> <p>COBS, by contrast, is not very sensitive to message content. The worst and average overhead for random data is the same. The lowest overhead is the reciprocal of the message length, which is achieved by messages containing 0x00 at least once every 255 bytes.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#cobs-checksum-interactions","title":"COBS Checksum Interactions","text":"<p>COBS is simply a framing scheme and does not define checksum requirements per se.</p> <p>Nevertheless a COBS receiver can correctly frame COBS encoded data 99.6% of the time due to the self-sealing nature of the frame. Undetected errors can still occur, but the frames themselves should be generally identifiable.</p> <p>Things become more complex when a checksum is added to detect data corruptions.</p> <p>If the checksum contains <code>0x00</code> then it will either need to be placed outside the frame or encoded so that it can be placed within the frame. Placing the checksum outside the frame introduces problems with frame synchronisation and should be avoided except under controlled conditions. COBS encoding the checksum adds immediate overhead in the form of a Link-Byte and generally complicates the process.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#ppp-cobs-checksums","title":"PPP COBS Checksums","text":"<p>Stuart Cheshire presented COBS for his PhD, and originally at SIGCOMM '97. The focus for these and other discussions of COBS was around the reduced overhead compared to HDLC-style Byte Stuffing.</p> <p>The initial COBS application was intended for PPP, which can be seen in the PPP COBS Proposal written around the same time as his PhD. PPP itself is described in RFC 1662 and does specify the use of a \"... Frame Check Sequence for error detection\":</p> <p>The FCS field is calculated over all bits of the Address, Control, Protocol, Information and Padding fields, not including any start and stop bits (asynchronous) nor any bits (synchronous) or octets (asynchronous or synchronous) inserted for transparency.  This also does not include the Flag Sequences nor the FCS field itself.</p> <p>When octets are received which are flagged in the Async- Control-Character-Map, they are discarded before calculating the FCS.</p> <p>The Async-Control-Character-Map is outside the scope of present discussions, aside from noting that it includes the HDLC Frame Sequence (<code>0x7e</code>) and Control Escape (<code>0x7d</code>) used to perform Byte Stuffing.</p> <p>However, in the PPP COBS Proposal the self-sealing nature of COBS Frames leads to the observation that:</p> <p>If one of the code byte octets is lost or corrupted, then the block will be miscounted.  This is likely to ultimately result in the inclusion of the trailing 7E within the data portion of an erroneous COBS block.  The receiver will detect this as either an error (if it does not support preemption) or as a preempted message.  In the latter case, the falsely preempted message will be discarded when the next true preemption occurs.  If the 7E still falls on a natural boundary between COBS blocks, then COBS will not detect the error, but the standard Frame Check Sequence (FCS) will be used to detect the corruption.</p> <p>Later in an example implementation we find the following comment:</p> <pre><code>/*\n* It turns out to be horribly complicated to support both the\n* scan-ahead functions and the CRC calculation at the same time\n* since the last byte of the CRC (or even both bytes) may be 00.\n* Thus, it is necessary in this implementation to do the CRC\n* first and the COBS encoding second in two separate steps.  If\n* the COBS output were fed into a simple linear output buffer\n* big enough to hold the largest packet, then this could be\n* greatly simplified.\n*/\n</code></pre> <p>So PPP COBS clearly favours calculating the FCS as a CRC applied to the PPP packet prior to COBS encoding since the CRC may itself contain <code>0x00</code> values that would then need to be Byte Stuffed to ensure frame delineation.</p> <p>PPP COBS is not alone in this regard.</p> <p>Every COBS recommendation and implementation I have seen chooses to append a checksum to the data prior to COBS encoding. While this is much simpler, it can significantly reduce the strength of the checksum as we shall see.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#cobs-error-cascade","title":"COBS Error Cascade","text":"<p>When any link in a COBS chain is corrupted, the COBS decoder will incorrectly decode the next and subsequent links. A single COBS link error can cascade into multiple errors at a rate of 8 bits per link (on average for uniform random data). When the underlying data contains <code>0x00</code> values or is simply long enough, many corruptions will occur due to the abundance of links.</p> <p>The following example shows a slice through some COBS data as it was sent (error free). The green <code>link(x)</code> bytes represent the COBS chain, with arbitrary non-zero data in between.</p> <p></p> <p>Now consider the same COBS data as received. A single bit error has occurred in the first link shown, turning <code>link(5)</code> into <code>link(1)</code>. The COBS decoder will now follow the path highlighted by the orange bytes, while at the same time skipping over the actual link bytes highlighted in cyan.</p> <p></p> <p>After a few links the chain is restored at <code>link(42)</code> and continues unaffected to seal the frame, making the received error undetectable to the frame length check.</p> <p>In this contrived example, the COBS decoder will produce an additional 8 errors as the result of a single error in the first link. This can be far worse in general.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#the-effect-of-error-cascade-on-error-detection","title":"The Effect of Error Cascade on Error Detection","text":"<p>If a checksum is used to detect data corruptions and that checksum is applied to the COBS encoded data, the checksum will be able to gate the decoding process thus generally avoiding the error cascade.</p> <p>However, if the checksum is applied to the unencoded data the checksum will not gate the decoding process. Instead the checksum will be asked to detect the error cascade introduced by the decoding process.</p> <p>If a CRC is used as the checksum, it may be able to detect some of the cascade as error bursts. But even it does, its error detection performance will be compromised making it less able to detect received errors.</p> <p>For this to cause an actual problem an error has to occur in one of the COBS links and the CRC check needs to fail (False Negative). This may be rare in practice for encrypted data, but data heavily biased with <code>0x00</code> values will be susceptible.</p> <p>This kind of zero-rich data occurs commonly enough in the wild for it to form the basis of CAP'N PROTO's \"Packing\" Scheme For instance small valued, multi-byte integers often have <code>0x00</code> MS-Bytes, Flag-fields tend to default to <code>0x00</code>, Embedded strings have NUL terminators, etc.</p> <p>Putting the likihood of a perfect storm aside for the moment, we can say in the case of a COBS Error Cascade affecting a COBS frame, the probability of an undetected error where a CRC is applied to the unencoded data tends towards:</p> <p><code>1/255 * 1/2^crc_poly_degree</code></p> <p>While this is low, it is many orders of magnitude worse than the unconditional probability of an undetected error in a COBS frame where the COBS encoded data is protected by the same CRC.</p>"},{"location":"blog/2024/04/23/error-cascade-in-cobs-encoded-data/#efficient-checksum-encoding","title":"Efficient Checksum Encoding","text":"<p>While the benefits of applying the CRC to the COBS encoded data are clear, methods for efficiently encoding the CRC for the frame are not.</p> <p>COBS encoding the CRC adds an additional COBS Link-Byte, which makes the best COBS overhead approach that of the average HDLC overhead.</p> <p>Modifying frame detection to use a <code>0x00</code> to mark the start of frame and a length field to locate the CRC could also be used with care. But this would not suit PPP COBS which uses <code>0x7e</code> as an HDLC-compatible COBS Terminator.</p> <p>Reserving two flag bits in the CRC field allows for CRC-14 to be used in place of CRC-16. Setting each bit to 1 when the corresponding byte in the CRC is <code>0x00</code> ensures that the CRC value is always compatible with the frame.</p> <p>This is ok, as long as the replacement CRC-14 can perform as well as the original CRC-16. However the overhead increases to four bits for for CRC-32, which limits CRC replacements to CRC-28 or less.</p> <p>A minature 3-bit COBS link could prefix the CRC data in a similar vein. But this gets complicated and only offers one more bit over using flags for CRC-32.</p> <p>So are there any better approaches? It turns out that the answer is yes. These will be the subject of follow-up posts.</p>"},{"location":"blog/2024/04/19/fast-crc-_off-the-shelf-and-on-your-way_/","title":"Fast-CRC: Off the shelf and on your way","text":"<p>Fast-CRC 1.0.0 has been released on Github under a permissive license (MS-PL).</p> <p>Fast-CRC provides tooling for generating efficient C99 Cyclic Redundancy Check (CRC) algorithms from pick and choose templates.</p> <p>Features:</p> <ul> <li>Every algorithm up to CRC-64 from Greg Cook's \"CRC Catalog\"</li> <li>Choice of 4-bit and 8-bit polynomial table-kernels</li> <li>Unit tested against published check values</li> <li>Dr. Nguyen's HD4 and HD6 \"Fast CRC\" algorithms</li> <li>Hamming profile database for every polynomial listed in Prof. Koopman's \"CRC Zoo\"</li> </ul> <p>This release has been tagged as NOT Production Ready. I'm looking for guinea-pigs to test the library -- especially on Big-Endian architectures where it has had no testing to date due to a lack of hardware.</p>"},{"location":"blog/2024/04/19/leeson-consulting/","title":"Leeson Consulting","text":"<p>I setup Leeson Consulting in 2013 to purvey my services in product based engineering. I'm an electrical engineer by degree and have over 20 years experience in software based R&amp;D. I've done work for Eaton, Tait, Caterpillar-Trimble, Dynamic Controls, and Enphase amongst others.</p> <p>What I bring to the table is creativity and experience combined with an orthodox engineering mindset.</p> <p>A smaller but no less important part of Leeson's business comes from Korean-English intepreting and translation. My wife, \uc774\uac15\uc219 (Kangsook Lee), is a NAATI 3 accredited professional intepreter, and has over the last 15 years been involved with GAP training for Korean flagged vessels navigating Aotearoa's (NZ) waters.</p> <p>We're based in \u014ctautahi (Christchurch), which boasts temperate climes, an international airport, and a dedicated engineering community.</p> <p>On a personal note, we're both Christians. Our faith rests in \u05d4\u05de\u05e9\u05d9\u05d7 \u05d9\u05e9\u05d5\u05e2 (Yahshua Hamashiah).</p> <p>We fall short of the mark just like everyone else, but we choose to accept forgiveness and life promised by Yeshua to those who trust Him.</p> <p>For a long time I've been afraid of what others might think. The banner hypocrite could rightfully be slung about my neck - a dead albatross to haunt a dying marineer.</p> <p>But this ship is not painted idle upon its melancholic ocean. There are safer harbours ahead, and just as Peter could say \"Lord Save Me!\" so do I.</p>"},{"location":"blog/2024/04/25/hybrid-cobs--babs-hcbs/","title":"Hybrid COBS + BABS (HCBS)","text":"<p>This post builds on what we've seen from COBS and BABS to define a simple hybridisation of the two that is not susceptible to error cascade while balancing transmission and computational overhead.</p>"},{"location":"blog/2024/04/25/hybrid-cobs--babs-hcbs/#initial-cobs-link","title":"Initial COBS Link","text":"<p>The classical COBS chain starts with a COBS Link Byte. This guarantees no additional overhead for the next 255 bytes. But since data lengths are often shorter than this, it raises the question of whether the initial COBS Link can be made smaller.</p> <p>HCBS permits the Encapsulating Protocol to define the width of the initial COBS Link. For short messages, a 5-bit or even 4-bit link may be sufficient.</p> <p>Relaxing this restriction allows the initial COBS Link to be worked into the Protocol's Frame Header, should the design accomodate.</p> <p>The potential benefit is obvious - one less byte overhead for short messages.</p>"},{"location":"blog/2024/04/25/hybrid-cobs--babs-hcbs/#babs-crc-space-cost","title":"BABS CRC - Space Cost","text":"<p>As we saw earlier, the Byte Stuffing mechanism may present issues for data CRCs. For COBS, the simple approach of Byte Stuffing the data and its CRC together can compromise error detection. However, the alternative of separately Byte Stuffing the CRC of the COBS-data increases transmission overhead.</p> <p>A solution to these problems is to:</p> <ol> <li>Calculate the COBS-data CRC,</li> <li>Using a lower degree polynomial than normal,</li> <li>Then BABS the CRC,</li> <li>And append to the COBS-data</li> </ol> <p><code>BABS(CRC_Degree)</code> will add at most one bit overhead, which means that <code>BABS(CRC_15)</code> takes the same space as <code>CRC_16</code>. Similarly, <code>BABS(CRC_31)</code> takes the same space as <code>CRC_32</code>.</p> <p>Specific polynomial choices depend on the design requirements, but some good lower degree polynomials include:</p> <ul> <li><code>CRC-15, 0x60d</code> HD4 to 2046 data bytes</li> <li><code>CRC-15, 0x2e75</code> HD6 to 14 data bytes</li> <li><code>CRC-23, 0x5781eb</code> HD6 to 253 data bytes</li> <li><code>CRC-31, 0x69f3cf97</code> HD6 to 4092 data bytes</li> <li>etc.</li> </ul>"},{"location":"blog/2024/04/25/hybrid-cobs--babs-hcbs/#babs-crc-computational-cost","title":"BABS CRC - Computational Cost","text":"<p>Commonly used CRC polynomials require no more than 4 bytes to store the CRC. This means that conversion from <code>Base_256</code> to <code>Base_255</code> requires at most 4 modulo-division operations (if using the standard base conversion algorithm).</p> <p>On architectures supporting both integer multiplication and division this can be fast, eg. 2-12 cycles per division on ARM Cortex-M3 and above. On architectures supporting only integer multiplication, the modulo-division can be efficiently wrapped by a function performing multiplication by a constant <code>1/255</code>, which is around 5 cycles per division.</p> <p>Mileage may vary, but the overall computational cost of <code>BABS(CRC_X)</code> should be less than 30 instructions on most platforms.</p>"},{"location":"blog/2024/04/25/hybrid-cobs--babs-hcbs/#scratching-the-surface","title":"Scratching the Surface","text":"<p>HCBS is a simple hybridisation that offers some savings, but the real savings come when the Encapsulating Protocol makes use of them.</p> <p>I am developing one such protocol that I plan to release as FOSS. This will take some time, but if you're interested in helping let me know.</p>"},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/checksums/","title":"Checksums","text":""},{"location":"blog/category/crc/","title":"CRC","text":""},{"location":"blog/category/hashes/","title":"Hashes","text":""},{"location":"blog/category/cobs/","title":"COBS","text":""},{"location":"blog/category/babs/","title":"BABS","text":""},{"location":"blog/category/byte-stuffing/","title":"Byte Stuffing","text":""},{"location":"blog/category/protocol-design/","title":"Protocol Design","text":""},{"location":"blog/category/ppp/","title":"PPP","text":""},{"location":"blog/category/foss/","title":"FOSS","text":""},{"location":"blog/category/leeson/","title":"Leeson","text":""},{"location":"blog/category/hello/","title":"Hello","text":""}]}